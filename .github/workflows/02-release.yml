name: Release

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        default: v22.0.2
    outputs:
      version:
        value: ${{ jobs.release.outputs.version }}
      environment:
        value: ${{ jobs.release.outputs.environment }}

jobs:

  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set.outputs.version }}
      environment: ${{ steps.set.outputs.environment }}
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Install Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm install --global semantic-release@${{ inputs.version }}

    - name: Semantic Release Configuration
      run: |
        if [[ -f .releaserc ]]
        then
          exit 0
        fi

        tee .releaserc <<EOF
        {
          "branches":
          [
            { "name": "main", "prerelease": false },
            { "name": "alpha", "prerelease": true },
            { "name": "beta", "prerelease": true }
          ],
          "plugins":
          [
            [
              "@semantic-release/commit-analyzer",
              {
                "preset": "angular",
                "releaseRules": [
                  { "breaking": true, "release": "major" },
                  { "revert": true, "release": "patch" },
                  { "type": "feat", "release": "minor" },
                  { "type": "fix", "release": "patch" },
                  { "type": "build", "release": "patch" },
                  { "type": "chore", "release": "patch" },
                  { "type": "ci", "release": "patch" },
                  { "type": "doc", "release": "patch" },
                  { "type": "docs", "release": "patch" },
                  { "type": "style", "release": "patch" },
                  { "type": "refactor", "release": "patch" },
                  { "type": "perf", "release": "patch" },
                  { "type": "test", "release": "patch" },
                  { "type": "tests", "release": "patch" }
                ]
              }
            ],
            "@semantic-release/release-notes-generator",
            "@semantic-release/github"
          ]
        }
        EOF

    - name: Run Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release

    - name: Set
      id: set
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0)
        echo "LATEST_TAG: ${LATEST_TAG}"

        LATEST_VERSION=$(echo "${LATEST_TAG}" | cut -c 2-)
        echo "LATEST_VERSION: ${LATEST_VERSION}"

        HEAD_TAGS=$(git tag --points-at HEAD)
        echo "HEAD_TAGS: ${HEAD_TAGS}"

        IS_HEAD_LATEST=$(echo "${HEAD_TAGS}" | grep -x "${LATEST_TAG}" | wc -l)
        echo "IS_HEAD_LATEST: ${IS_HEAD_LATEST}"

        if [[ "${IS_HEAD_LATEST}" == "0" ]]
        then
          echo "version=" >> $GITHUB_OUTPUT
        else
          echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
        fi

        if [[ "${IS_HEAD_LATEST}" == "0" ]]
        then
          echo "environment=Development" >> $GITHUB_OUTPUT
        elif [[ "${LATEST_TAG}" == *"-"* ]]
        then
          echo "environment=Staging" >> $GITHUB_OUTPUT
        else
          echo "environment=Production" >> $GITHUB_OUTPUT
        fi

    - name: Read
      run: |
        echo "Version: ${{ steps.set.outputs.version }}"
        echo "Environment: ${{ steps.set.outputs.environment }}"
