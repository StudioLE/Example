name: CI/CD

on:
  push:

jobs:

  build-ubuntu:
    name: Ubuntu
    uses: ./.github/workflows/dotnet-build.yml
    with:
      project: ""
      os: ubuntu-latest
      nuget_feed: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      nuget_username: ${{ github.repository_owner }}
      pack: true
    secrets:
      nuget_password: ${{ secrets.PACKAGES_TOKEN }}

  build-windows:
    name: Windows
    if: ${{ github.ref_type == 'branch' && contains(fromJSON('["main", "beta", "alpha"]'), github.ref_name) }}
    uses: ./.github/workflows/dotnet-build.yml
    with:
      project: ""
      os: windows-latest
      nuget_feed: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      nuget_username: ${{ github.repository_owner }}
    secrets:
      nuget_password: ${{ secrets.PACKAGES_TOKEN }}

  publish-cli-linux:
    name: Linux CLI
    uses: ./.github/workflows/dotnet-publish.yml
    with:
      project: StudioLE.Example.Cli/src/StudioLE.Example.Cli.csproj
      runtime: linux-x64
      npm: ""
      workload: ""
      artifact: Cli-Linux
      nuget_feed: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      nuget_username: ${{ github.repository_owner }}
    secrets:
      nuget_password: ${{ secrets.PACKAGES_TOKEN }}

  publish-cli-windows:
    name: Windows CLI
    uses: ./.github/workflows/dotnet-publish.yml
    with:
      project: StudioLE.Example.Cli/src/StudioLE.Example.Cli.csproj
      runtime: win-x64
      npm: ""
      workload: ""
      artifact: Cli-Windows
      nuget_feed: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      nuget_username: ${{ github.repository_owner }}
    secrets:
      nuget_password: ${{ secrets.PACKAGES_TOKEN }}

  release:
    name: Release
    if: ${{ github.ref_type == 'branch' && contains(fromJSON('["main", "alpha", "beta"]'), github.ref_name) }}
    needs:
    - build-ubuntu
    uses: ./.github/workflows/surveyor-release.yml
    with:
      nuget_feed: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      nuget_username: ${{ github.repository_owner }}
    secrets:
      nuget_password: ${{ secrets.PACKAGES_TOKEN }}

  push-tests:
    name: Test Results
    if: ${{ always() }}
    needs:
    - build-ubuntu
    uses: ./.github/workflows/push-to-repo.yml
    with:
      repo: StudioLE/Tests
      artifact: Tests-Linux-X64
      rm: "${{ github.repository }}/${{ github.run_id }}"
      path: "${{ github.repository }}/${{ github.run_id }}"
      message: "feat(${{ github.repository }}): Added test results for ${{ github.sha }}"
    secrets:
      repo_token: ${{ secrets.TESTS_TOKEN }}

  push-packages:
    name: Packages
    needs:
    - release
    uses: ./.github/workflows/push-to-nuget.yml
    with:
      nuget_feed: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      nuget_username: ${{ github.repository_owner }}
    secrets:
      nuget_password: ${{ secrets.GITHUB_TOKEN }}

  push-cli-linux:
    name: Linux Cli
    needs:
    - publish-cli-linux
    - release
    uses: ./.github/workflows/push-to-github-releases.yml
    with:
      artifact: Cli-Linux
      name: StudioLE.Example.Cli-${{ needs.release.outputs.version }}-Linux-x64
      version: ${{ needs.release.outputs.version }}

  push-cli-windows:
    name: Windows Cli
    needs:
    - build-windows
    - publish-cli-windows
    - release
    uses: ./.github/workflows/push-to-github-releases.yml
    with:
      artifact: Cli-Windows
      name: StudioLE.Example.Cli-${{ needs.release.outputs.version }}-Windows-x64
      version: ${{ needs.release.outputs.version }}

  documentation:
    name: Documentation
    if: ${{ needs.release.outputs.version != '' }}
    needs:
    - release
    uses: ./.github/workflows/illuminate-generate.yml
    with:
      project: ""
      os: ubuntu-latest
      nuget_feed: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      nuget_username: ${{ github.repository_owner }}
      environment: ${{ needs.release.outputs.environment }}
      source: "*/src/bin/Release/*/StudioLE.*.dll"
      section: "example"
      version: ${{ needs.release.outputs.version }}
    secrets:
      nuget_password: ${{ secrets.PACKAGES_TOKEN }}
      documentation_token: ${{ secrets.DOCUMENTATION_TOKEN }}

  environment:
    name: Environment
    if: ${{ needs.release.outputs.environment != '' }}
    needs:
    - release
    runs-on: ubuntu-latest
    environment: ${{ needs.release.outputs.environment }}
    steps:
    - run: |
        echo "Environment: ${{ needs.release.outputs.environment }}"
